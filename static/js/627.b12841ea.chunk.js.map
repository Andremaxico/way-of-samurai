{"version":3,"file":"static/js/627.b12841ea.chunk.js","mappings":"uKACA,G,QAAmE,4BAAnE,EAAyG,2BAAzG,EAA4I,wBAA5I,EAAmL,+B,4CCcnL,EAZiB,SAAC,GAA2C,IAA1CA,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,WAAeC,GAAU,YAC3D,OACC,iBAAKC,UAAWC,EAAhB,WACC,+CAAcL,EAASC,GAAD,QAAC,UAAUC,GAAX,IACrBI,UAAW,CAACC,MAAO,EAAGC,QAAS,iDAAoDL,GADpF,IAECC,UAAS,UAAKC,EAAL,YAAyBF,EAAKC,UAA9B,YAA2CD,EAAKM,OAASJ,MAElEF,EAAKM,QAAS,cAAGL,UAAWC,EAAd,SAAqCF,EAAKM,MAAMD,e,mGCTlE,GAAgB,UAAY,+BAA+B,YAAc,iCAAiC,MAAQ,2BAA2B,KAAO,0BAA0B,OAAS,4BAA4B,YAAc,iCAAiC,MAAQ,2BAA2B,WAAa,gCAAgC,cAAgB,mCAAmC,YAAc,iCAAiC,UAAY,gC,+EC+Chc,EA7CuB,SAACE,GAEvB,OAAoCC,EAAAA,EAAAA,UAASD,EAAME,QAAnD,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA4BH,EAAAA,EAAAA,WAAS,GAArC,eAAOI,EAAP,KAAeC,EAAf,MAGAC,EAAAA,EAAAA,YAAU,WACNP,EAAME,SAAWC,GACnBC,EAAcJ,EAAME,UAEnB,CAACF,EAAME,SAmBV,OACC,gBAAKR,UAAWC,EAAAA,cAAhB,SACGU,GAIA,qBAAU,cAAY,kBAAkBX,UAAWC,EAAAA,YAAqBa,WAAS,EAACC,UAAU,MAAMZ,MAAOM,EACzGO,SAZqB,SAACC,GACzB,IAAMC,EAAWD,EAAME,OAAOhB,MAC9BO,EAAcQ,IAUmBE,OAAQd,EAAMe,aAtB7B,WAEfZ,GAAcH,EAAME,QAEtBF,EAAMgB,eAAeb,GAGtBG,GAAU,OAWP,cAAGZ,UAAWC,EAAAA,WAAoB,cAAY,cAAcsB,QAASjB,EAAMe,aApB7D,kBAAMT,GAAU,IAoB9B,SACCH,IAAc,cAAGT,UAAWC,EAAAA,cAAd,0BCGpB,MAjCA,SAAqBK,GACpB,IAEA,EAA6DA,EAAMkB,YAA5DC,EAAP,EAAOA,SAAsBC,GAA7B,EAAiBC,OAAjB,EAA6BD,QAAQE,EAArC,EAAqCA,QAASP,EAA9C,EAA8CA,YAChCQ,EAA8BH,EAArCI,MAAwBC,EAAaL,EAApBM,MAGlBnC,EAAO4B,EAASQ,MAAM,IAAIC,KAAI,SAAAC,GACnC,OAAOA,EAAOC,gBAAkBD,EAAzB,WAAsCA,GAAWA,KAGzD,OACC,iBAAKnC,UAAWC,EAAAA,YAAhB,WACC,gBAAKD,UAAWC,EAAAA,MAAhB,UACC,gBAAKoC,IAAKR,GAAYS,EAAcC,IAAI,iBAEzC,iBAAKvC,UAAWC,EAAAA,KAAhB,WACC,gBAAKD,UAAWC,EAAAA,OAAhB,UACC,gBAAKoC,IAAKN,GAAaS,EAAeD,IAAI,yBAE3C,iBAAKvC,UAAWC,EAAAA,YAAhB,WACC,cAAGD,UAAWC,EAAAA,MAAd,SAA8BJ,KAC9B,SAAC,EAAD,CACCyB,eAAgBhB,EAAMgB,eACtBD,YAAaA,EAAab,OAAQoB,OAGlCP,IAAe,mBAAQrB,UAAWC,EAAAA,UAAmBsB,QA1B3C,kBAAMjB,EAAMmC,UA0BP,2B,UChCrB,EAA2D,mBAA3D,EAAuF,qBAAvF,EAAmH,mBCgBnH,MAdA,SAAenC,GACb,OACA,iBAAKN,UAAWC,EAAhB,WACA,gBAAKD,UAAWC,EAAhB,UACC,gBAAKoC,IAAK/B,EAAMoC,eAEjB,iBAAK1C,UAAWC,EAAhB,WACC,uBAAIK,EAAMqC,KAAKC,QACf,yCAAiBtC,EAAMqC,KAAKE,gBCV/B,EAAiE,yBAAjE,EAAoG,yBAApG,EAAqI,uBCerI,EAXgB,SAACvC,GAChB,IAAMwC,EAAYxC,EAAMyC,UAAUb,KAAI,SAACS,EAAMK,GAC5C,OAAO,SAAC,EAAD,CAAMN,UAAWpC,EAAMoC,WAAaF,EAAeG,KAAMA,GAAWK,MAE5E,OACC,gBAAKhD,UAAWC,EAAhB,SACG6C,KCIL,GAFyBG,EAAAA,EAAAA,KARD,SAAAC,GAAU,IAAD,EAChC,MAAO,CACNH,UAAWG,EAAMC,YAAYJ,UAC7BL,WAAW,UAAAQ,EAAMC,YAAYC,2BAAlB,eAAuC1B,OAAOI,QACpDU,KAIkBS,CAAyBI,G,UCZlD,EAAgG,yB,oBCIhG,IAQA,GAFyBJ,EAAAA,EAAAA,KAND,SAAAC,GACvB,MAAO,CACNI,YAAaJ,EAAMC,YAAYG,eAIiB,CAACC,QAAAA,EAAAA,IAA1BN,ECNV,SAAiB3C,GAC/B,OAA6EkD,EAAAA,EAAAA,MAArEC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAAYC,EAAlC,EAAkCA,MAAO/D,EAAzC,EAAyCA,SAAuBgE,EAAhE,EAAmDC,UAAaD,OAOhE,OACC,kBAAM5D,UAAWC,EAAiB6D,SAAWL,GAN7B,WAChBnD,EAAMiD,QAAQI,EAAM,aACpBD,EAAW,eAIX,WACC,SAACK,EAAA,EAAD,CACCjE,WAAY,CAACiB,UAAW,CAACZ,MAAO,IAAKC,QAAS,uBAE9CP,KAAK,WAAWmE,YAAY,UAAUpE,SAAUA,EAAUS,MAAOuD,EAAOK,YAEzE,+C,UCKH,EAlBgB,SAAC3D,GAChB,OAAIA,EAAM8C,qBAKT,iBAAKpD,UAAWC,EAAhB,WACC,SAAC,EAAD,CACCuB,YAAalB,EAAM8C,oBACnB9B,eAAgBhB,EAAMgB,eAAgBmB,OAAQnC,EAAMmC,UAErD,eAAIzC,UAAWC,EAAf,uBACA,SAAC,EAAD,KACA,SAAC,EAAD,QAXM,SAACiE,EAAA,EAAD,K,mBCTIC,EAAc,SAACjB,GAC3B,OAAOA,EAAMkB,KAAKzB,KAAK0B,U,8BCgElBC,EAAU,CACfC,iBAAkBC,EAAAA,GAClBC,YAAAA,EAAAA,GACAnD,eAAAA,EAAAA,GACAmB,OAAAA,EAAAA,IAGD,GAAeiC,EAAAA,EAAAA,KACdzB,EAAAA,EAAAA,KAjBuB,SAACC,GACxB,MAAO,CACNE,oBAAqBF,EAAMC,YAAYC,oBACvCuB,cAAezB,EAAMC,YAAYwB,cACjCC,YAAa1B,EAAMkB,KAAKzB,KAAKkC,GAC7BC,WAAY5B,EAAM6B,UAAUD,WAC5BT,SAAUF,EAAYjB,MAWEoB,GACzBU,EAAAA,EACAC,EAAAA,EAHD,EAxDyB,SAAC3E,GACzB,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOoB,EAAP,KAAeuD,EAAf,KAqBA,OAnBArE,EAAAA,EAAAA,YAAU,WACNP,EAAM6E,OAAOC,OAAOzD,OAEtBuD,EAAU5E,EAAM6E,OAAOC,OAAOzD,QAG9BuD,EAAU,QAGT,CAAC5E,EAAM6E,OAAOC,OAAOzD,UAGxBd,EAAAA,EAAAA,YAAU,WAENc,GACFrB,EAAMmE,YAAY9C,GAAQ0D,MAAK,kBAAM/E,EAAMiE,kBAAiB,QAE3D,CAAC5C,IAECrB,EAAM+D,UAAa/D,EAAM6E,OAAOC,OAAOzD,OAEzCrB,EAAMwE,YACD,SAACZ,EAAA,EAAD,KAGP,SAAC,EAAD,CAASd,oBAAsBzB,EAC3BrB,EAAM8C,oBACN9C,EAAMqE,cAERrD,eAAgBhB,EAAMgB,eACtBmB,OAAQnC,EAAMmC,UAX0C,SAAC,KAAD,CAAU6C,GAAG,SAASC,SAAO","sources":["webpack://samurai-way/./src/UI/FormControls/Textarea/Textarea.module.scss?d84d","UI/FormControls/Textarea/Textarea.jsx","webpack://samurai-way/./src/components/Profile/ProfileBody/ProfileBody.module.scss?0686","components/Profile/ProfileBody/ProfileStatus/ProfileStatus.jsx","components/Profile/ProfileBody/ProfileBody.jsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.scss?ca59","components/Profile/MyPosts/Post/Post.jsx","webpack://samurai-way/./src/components/Profile/Profile.module.scss?4008","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://samurai-way/./src/components/Profile/NewPost/NewPost.module.scss?b205","components/Profile/NewPost/NewPostContainer.jsx","components/Profile/NewPost/NewPost.jsx","components/Profile/Profile.jsx","Redux/auth-selectors.js","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Textarea_container__KVlq1\",\"Textarea\":\"Textarea_Textarea__Vwi60\",\"textarea\":\"Textarea_textarea__ro8Cq\",\"error\":\"Textarea_error__nqZBf\",\"errorMessage\":\"Textarea_errorMessage__6IvbI\"};","import React from 'react';\r\nimport classes from './Textarea.module.scss';\r\n\r\nconst Textarea = ({register, name, validation, ...rest}) => {\r\n\treturn (\r\n\t\t<div className={classes.Textarea}>\r\n\t\t\t<textarea {...register(name, {...validation, \r\n\t\t\t\tminLength: {value: 2, message: 'Your message must have more than 1 symbol'}})} {...rest}\r\n\t\t\t\tclassName={`${classes.textarea} ${rest.className} ${rest.error && classes.error}`}\r\n\t\t\t></textarea>\r\n\t\t\t{rest.error && <p className={classes.errorMessage}>{rest.error.message}</p>}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Textarea;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ProfileBody_container__IDU7r\",\"profileBody\":\"ProfileBody_profileBody__YJWNv\",\"cover\":\"ProfileBody_cover__1KR2Z\",\"info\":\"ProfileBody_info__alpqF\",\"avatar\":\"ProfileBody_avatar__WQwrJ\",\"description\":\"ProfileBody_description__DC9Ea\",\"login\":\"ProfileBody_login__cTPUm\",\"statusText\":\"ProfileBody_statusText__dsdVz\",\"defaultStatus\":\"ProfileBody_defaultStatus__vZOuL\",\"statusInput\":\"ProfileBody_statusInput__VOoMQ\",\"logoutBtn\":\"ProfileBody_logoutBtn__6VR8k\"};","import React, { useState, useEffect } from 'react'\r\nimport classes from '../ProfileBody.module.scss';\r\n\r\nconst  ProfileStatus = (props) => {\r\n\r\n\tconst [statusText, setStatusText] = useState(props.status);\r\n\tconst [isEdit, setIsEdit] = useState(false);\r\n\r\n\t//if props.status changed\r\n\tuseEffect(() => {\r\n\t\tif(props.status !== statusText) {\r\n\t\t\tsetStatusText(props.status);\r\n\t\t}\r\n\t}, [props.status])\r\n\r\n\tconst startEdit = () => setIsEdit(true);\r\n\r\n\tconst finishEdit = () => {\r\n\t\t//if we type new status\r\n\t\tif(statusText != props.status) {\r\n\t\t\t//send put request to server\r\n\t\t\tprops.updateMyStatus(statusText);\r\n\t\t}\r\n\r\n\t\tsetIsEdit(false);\r\n\t}\r\n\r\n\tconst changeStatusText = (event) => {\r\n\t\tconst newValue = event.target.value;\r\n\t\tsetStatusText(newValue);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.profileStatus}>\r\n\t\t\t{!isEdit \r\n\t\t\t? <p className={classes.statusText} data-testid=\"status-text\" onClick={props.isMyProfile && startEdit}>\r\n\t\t\t\t\t{statusText || <i className={classes.defaultStatus}>no info</i>}\r\n\t\t\t\t</p>\r\n\t\t\t: <textarea data-testid=\"status-textarea\" className={classes.statusInput} autoFocus maxLength='300' value={statusText}\r\n\t\t\t\t\tonChange={ changeStatusText } onBlur={props.isMyProfile && finishEdit}\r\n\t\t\t\t></textarea>\r\n\t\t\t}\r\n\t\t</div>\r\n\t\t\r\n\t)\r\n}\r\n\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport classes from './ProfileBody.module.scss';\r\nimport defaultAvatar from '../../../assests/images/default-user-avatar.png';\r\nimport defaultCover from '../../../assests/images/default-cover.png';\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\nfunction ProfileBody(props) {\r\n\tconst logout = () => props.logout();\r\n\r\n\tconst {fullName, userId: id, photos, aboutMe, isMyProfile} = props.profileInfo;\r\n\tconst {small: coverImg, large: avatarImg} = photos;\r\n\r\n\t//AndreMaxico => Andre Maxico\r\n\tconst name = fullName.split('').map(symbol => {\r\n\t\treturn symbol.toUpperCase() === symbol ? ` ${symbol}` : symbol\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className={classes.profileBody}>\r\n\t\t\t<div className={classes.cover}>\r\n\t\t\t\t<img src={coverImg || defaultCover} alt=\"Cover img\" />\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.info}>\r\n\t\t\t\t<div className={classes.avatar}>\r\n\t\t\t\t\t<img src={avatarImg || defaultAvatar} alt=\"Loading avatar...\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={classes.description}>\r\n\t\t\t\t\t<p className={classes.login}>{name}</p>\r\n\t\t\t\t\t<ProfileStatus \r\n\t\t\t\t\t\tupdateMyStatus={props.updateMyStatus} \r\n\t\t\t\t\t\tisMyProfile={isMyProfile} status={aboutMe}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t{ isMyProfile && <button className={classes.logoutBtn} onClick={ logout }>Logout</button>}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileBody;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Post_container__FORhV\",\"post\":\"Post_post__43cTw\",\"avatar\":\"Post_avatar__dGEbx\",\"text\":\"Post_text__swDVs\"};","import React from 'react'\r\nimport classes from './Post.module.scss';\r\n\r\nfunction Post (props) {\r\n  return (\r\n\t <div className={classes.post}>\r\n\t\t<div className={classes.avatar}>\r\n\t\t\t<img src={props.avatarUrl}/>\r\n\t\t</div>\r\n\t\t<div className={classes.text}>\r\n\t\t\t<p>{props.data.text}</p>\r\n\t\t\t<p>Likes count: {props.data.likes}</p>\r\n\t\t</div>\t\r\n\t </div>\r\n  )\r\n}\r\n\r\nexport default Post;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Profile_container__Wm7l7\",\"profile\":\"Profile_profile__iROPK\",\"myPosts\":\"Profile_myPosts__3JCrI\",\"title\":\"Profile_title__g+iCI\"};","import React from 'react';\r\nimport Post from './Post';\r\nimport classes from '../Profile.module.scss';\r\nimport defaultAvatar from '../../../assests/images/default-user-avatar.png';\r\n\r\nconst MyPosts = (props) => {\r\n\tconst postsList = props.postsData.map((data, index) => {\r\n\t\treturn <Post avatarUrl={props.avatarUrl || defaultAvatar} data={data} key={index}/>;\r\n\t});\r\n\treturn (\r\n\t\t<div className={classes.myPosts}>\r\n\t\t\t{ postsList }\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MyPosts from './MyPosts';\r\nimport defaultAvatar from '../../../assests/images/default-user-avatar.png';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tpostsData: state.profilePage.postsData,\r\n\t\tavatarUrl: state.profilePage.currUserProfileInfo?.photos.small ||\r\n\t\t\t\t\t  defaultAvatar,\r\n\t}\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"NewPost_container__IKpkL\",\"title\":\"NewPost_title__5NM8Q\",\"NewPost\":\"NewPost_NewPost__l342s\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addPost} from '../../../Redux/profile-reducer';\r\nimport NewPost from './NewPost';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tnewPostText: state.profilePage.newPostText\r\n\t}\r\n}\r\n\r\nconst NewPostContainer = connect(mapStateToProps, {addPost})(NewPost);\r\n\r\nexport default NewPostContainer;\r\n","import React from 'react';\r\nimport classes from './NewPost.module.scss';\r\nimport { useForm } from 'react-hook-form';\r\nimport Textarea from '../../../UI/FormControls/Textarea';\r\n\r\nexport default function NewPost(props) {\r\n\tconst { handleSubmit, resetField, watch, register, formState: { errors } } = useForm();\r\n\r\n\tconst onSubmit = () => {\r\n\t\tprops.addPost(watch('postText'));\r\n\t\tresetField('postText')\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form className={classes.NewPost} onSubmit={ handleSubmit( onSubmit ) }>\r\n\t\t\t<Textarea \r\n\t\t\t\tvalidation={{maxLength: {value: 500, message: 'Your post too long'},\r\n\t\t\t\t\t\t\t\t}} \r\n\t\t\t\tname='postText' placeholder='text...' register={register} error={errors.postText}\r\n\t\t\t/>\r\n\t\t\t<button>Add Post</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport ProfileBody from './ProfileBody';\r\nimport MyPosts from './MyPosts';\r\nimport NewPost from './NewPost'\r\nimport classes from './Profile.module.scss'\r\nimport Preloader from '../../UI/Preloader';\r\n\r\nconst Profile = (props) => {\r\n\tif(!props.currUserProfileInfo) {\r\n\t\treturn <Preloader />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.profile}>\r\n\t\t\t<ProfileBody \r\n\t\t\t\tprofileInfo={props.currUserProfileInfo} \r\n\t\t\t\tupdateMyStatus={props.updateMyStatus} logout={props.logout}\r\n\t\t\t/>\r\n\t\t\t<h2 className={classes.title}>My posts</h2>\r\n\t\t\t<NewPost />\r\n\t\t\t<MyPosts />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Profile;\r\n","export const getIsAuthed = (state) => {\r\n\treturn state.auth.data.isAuthed;\r\n} \r\n","import React, { useState, useEffect } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport Profile from './Profile';\r\nimport Preloader from '../../UI/Preloader';\r\n//reducers\r\nimport { toggleIsFetchingAC } from '../../Redux/users-reducer';\r\nimport { setUserById, updateMyStatus } from '../../Redux/profile-reducer';\r\nimport { logout } from '../../Redux/auth-reducer';\r\n//selectors\r\nimport { getIsAuthed } from '../../Redux/auth-selectors';\r\n//hocs\r\nimport withRouter from '../../hocs/withRouter';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport withNetworkRedirect from '../../hocs/withNetworkRedirect';\r\n\r\nconst ProfileContainer = (props) => {\r\n\tconst [userId, setUserId] = useState(null);\r\n\t//if we render other user profile, we set const userId\r\n\tuseEffect(() => {\r\n\t\tif(props.router.params.userId) {\r\n\t\t\t//set const for show user profile\r\n\t\t\tsetUserId(props.router.params.userId);\r\n\t\t} else {\r\n\t\t\t//set const to null to show my profile\r\n\t\t\tsetUserId(null);\r\n\t\t}\r\n\r\n\t}, [props.router.params.userId]);\r\n\r\n\t//set currUserProfileInfo in state if we get userId\r\n\tuseEffect(() => {\r\n\t\t//if we get other user id, we set this with thunk\r\n\t\tif(userId) {\r\n\t\t\tprops.setUserById(userId).then(() => props.toggleIsFetching(false));\r\n\t\t}\r\n\t}, [userId])\r\n\r\n\tif (!props.isAuthed && !props.router.params.userId) return <Navigate to='/login' replace />\r\n\r\n\tif(props.isFetching ) {\r\n\t\treturn <Preloader />\r\n\t}\r\n\treturn (\r\n\t\t<Profile currUserProfileInfo={ userId\r\n\t\t\t\t? props.currUserProfileInfo\r\n\t\t\t\t: props.myProfileInfo\r\n\t\t\t\t}\r\n\t\t\t\tupdateMyStatus={props.updateMyStatus}\r\n\t\t\t\tlogout={props.logout}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tcurrUserProfileInfo: state.profilePage.currUserProfileInfo,\r\n\t\tmyProfileInfo: state.profilePage.myProfileInfo,\r\n\t\tmyProfileId: state.auth.data.id,\r\n\t\tisFetching: state.usersPage.isFetching,\r\n\t\tisAuthed: getIsAuthed(state),\r\n\t}\r\n}\r\nconst methods = {\r\n\ttoggleIsFetching: toggleIsFetchingAC,\r\n\tsetUserById,\r\n\tupdateMyStatus,\r\n\tlogout,\r\n}\r\n\r\nexport default compose(\r\n\tconnect(mapStateToProps, methods),\r\n\twithNetworkRedirect,\r\n\twithRouter,\r\n)(ProfileContainer);\r\n"],"names":["register","name","validation","rest","className","classes","minLength","value","message","error","props","useState","status","statusText","setStatusText","isEdit","setIsEdit","useEffect","autoFocus","maxLength","onChange","event","newValue","target","onBlur","isMyProfile","updateMyStatus","onClick","profileInfo","fullName","photos","userId","aboutMe","coverImg","small","avatarImg","large","split","map","symbol","toUpperCase","src","defaultCover","alt","defaultAvatar","logout","avatarUrl","data","text","likes","postsList","postsData","index","connect","state","profilePage","currUserProfileInfo","MyPosts","newPostText","addPost","useForm","handleSubmit","resetField","watch","errors","formState","onSubmit","Textarea","placeholder","postText","Preloader","getIsAuthed","auth","isAuthed","methods","toggleIsFetching","toggleIsFetchingAC","setUserById","compose","myProfileInfo","myProfileId","id","isFetching","usersPage","withNetworkRedirect","withRouter","setUserId","router","params","then","to","replace"],"sourceRoot":""}