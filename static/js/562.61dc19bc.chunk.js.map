{"version":3,"file":"static/js/562.61dc19bc.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/UI/FormControls/Checkbox/Checkbox.module.scss?25a9","UI/FormControls/Checkbox/Checkbox.tsx","UI/FormControls/Field/Field.tsx","webpack://samurai-way/./src/components/Login/Login.module.scss?4086","webpack://samurai-way/./src/components/Login/LoginForm/LoginForm.module.scss?ebd6","UI/FormControls/Field/EmailField.tsx","UI/FormControls/Field/PasswordField.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","webpack://samurai-way/./src/UI/NetworkError/NetworkError.module.scss?0318","UI/NetworkError/NetworkError.tsx","hocs/withNetworkRedirect.tsx","webpack://samurai-way/./src/UI/FormControls/Field/Field.module.scss?80fb"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Checkbox_container__sVo6P\",\"Checkbox\":\"Checkbox_Checkbox__JIYPe\",\"error\":\"Checkbox_error__dLJ4c\"};","import * as React from 'react'\r\nimport { DeepRequired, FieldError, FieldErrorsImpl, FieldNamesMarkedBoolean, Merge } from 'react-hook-form';\r\nimport classes from './Checkbox.module.scss';\r\n\r\ntype PropsType<FieldsNames> = {\r\n\tregister: any,\r\n\tname: FieldsNames,\r\n\tvalidation?: object,\r\n\tclassName?:string | undefined,\r\n\terror: FieldError | undefined,\r\n\tlabelText: string | null\r\n}\r\n\r\nconst Checkbox = <FieldsNames extends string>({\r\n\tregister, name, validation, className, error, labelText\r\n}: PropsType<FieldsNames>) => {\r\n\treturn (\r\n\t\t<div className={`${classes.Checkbox} ${className}`}>\r\n\t\t\t<input \r\n\t\t\t\ttype=\"checkbox\" id={name} \r\n\t\t\t\t{...register(name, {...validation} )} \r\n\t\t\t\tclassName={classes.checkboxInput}\r\n\t\t\t/>\r\n\t\t\t<label \r\n\t\t\t\thtmlFor={name} tabIndex={Number('0')} \r\n\t\t\t\tclassName={`${classes.checkboxLabel} ${error && classes.error}`}\r\n\t\t\t>{labelText}</label>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Checkbox;\r\n","import * as React from 'react';\r\nimport { FormFieldErrorType } from '../../../types/types';\r\nimport classes from './Field.module.scss';\r\n\r\nexport type FieldPropsType = {\r\n\tregister?: any,\r\n\terror: FormFieldErrorType | undefined,\r\n\tclassName?: string | undefined,\r\n\trest?: object,\r\n} \r\n\r\ntype PropsType = {\r\n\tchildren: React.ReactNode,\r\n} & FieldPropsType;\r\n\r\nconst Field: React.FC<PropsType> = ({className, error, children }) => {\r\n\treturn (\r\n\t\t<div className={`${classes.Field} ${className}`}>\r\n\t\t\t{children}\r\n\t\t\t{error && <p className={classes.errorMessage}>{error.message}</p>}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Field;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Login_container__4AqVf\",\"Login\":\"Login_Login__0aACz\",\"title\":\"Login_title__uHeoG\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"LoginForm_container__PQS8+\",\"LoginForm\":\"LoginForm_LoginForm__sLkxx\",\"inputWrapper\":\"LoginForm_inputWrapper__8YBqi\",\"submitBtn\":\"LoginForm_submitBtn__77756\",\"input\":\"LoginForm_input__z4V6a\",\"checkbox\":\"LoginForm_checkbox__vYXM5\",\"errorMessage\":\"LoginForm_errorMessage__Qvi2S\"};","import * as React from 'react';\r\nimport { FormFieldErrorType } from '../../../types/types';\r\nimport Field, { FieldPropsType } from './Field';\r\nimport classes from './Field.module.scss';\r\n\r\nconst EmailField: React.FC<FieldPropsType> = ({register, error, className, ...rest}) => {\r\n\treturn (\r\n\t\t<Field error={error} {...rest}>\r\n\t\t\t<input \r\n\t\t\t\ttype=\"email\" className={classes.input} \r\n\t\t\t\tplaceholder='Email' {...register('email', {\r\n\t\t\t\t\trequired: 'This field is required',\r\n\t\t\t\t})}\r\n\t\t\t/>\r\n\t\t</Field>\r\n\t)\r\n}\r\n\r\nexport default EmailField;","import * as React from 'react';\r\nimport Field, { FieldPropsType } from './Field';\r\nimport classes from './Field.module.scss';\r\n\r\nconst PasswordField: React.FC<FieldPropsType> = ({register, error,...rest}) => {\r\n\treturn (\r\n\t\t<Field error={error} {...rest}>\r\n\t\t\t<input \r\n\t\t\t\ttype=\"password\" className={classes.input}  autoComplete='true'\r\n\t\t\t\tplaceholder='Password' {...register('password', {\r\n\t\t\t\t\trequired: 'This field is required',\r\n\t\t\t\t\tpattern: {\r\n\t\t\t\t\t\t//value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/,\r\n\t\t\t\t\t\tmessage: 'Password must have at least 1 upper case symbol, 1 number', \r\n\t\t\t\t\t},\r\n\t\t\t\t\tminLength: {value: 8, message: 'Your password too short'},\r\n\t\t\t\t\tmaxLength: {value: 14, message: 'Your password too long'},\r\n\t\t\t\t})}\r\n\t\t\t/>\r\n\t\t</Field>\r\n\t)\r\n}\r\n\r\nexport default PasswordField;","import * as React from 'react';\r\nimport classes from './LoginForm.module.scss';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { login } from '../../../Redux/auth-reducer';\r\nimport Checkbox from '../../../UI/FormControls/Checkbox';\r\nimport Captcha from '../../../UI/FormControls/Captcha';\r\nimport { Navigate } from 'react-router-dom'\r\nimport Preloader from '../../../UI/Preloader';\r\nimport EmailField from '../../../UI/FormControls/Field/EmailField';\r\nimport PasswordField from '../../../UI/FormControls/Field/PasswordField';\r\nimport { LoginDataType } from '../../../types/types';\r\nimport { selectCaptcha, selectIsAuthed, selectLoginError } from '../../../Redux/auth-selectors';\r\nimport { AnyAction } from 'redux';\r\n\r\ntype PropsType = {};\r\n\r\ntype LoginFormValuesType = LoginDataType;\r\n\r\nconst LoginForm: React.FC<PropsType> = React.memo((props) => {\r\n\tconst isAuthed = useSelector(selectIsAuthed);\r\n\tconst captcha = ''// useSelector(selectCaptcha);\r\n\tconst loginError = useSelector(selectLoginError);\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst loginToProfile = async (data: LoginDataType) => {\r\n\t\tawait dispatch(login(data) as unknown as AnyAction);\r\n\t}\r\n\r\n\tconst { \r\n\t\tregister, handleSubmit, formState: { errors, isValidating, isSubmitting}\r\n\t} = useForm<LoginFormValuesType>();\r\n\r\n\tconst [summaryError, setSummaryError] = React.useState<string | null>(null);\r\n\tconsole.log('form rerender');\r\n\r\n\tconst onSubmit = async (data: LoginFormValuesType) => {\r\n\t\t//login dispatch error or null\r\n\t\tawait loginToProfile(data);\r\n\t\tsetSummaryError(loginError);\r\n\t\tconsole.log('sum error: ', summaryError);\r\n\t\tconsole.log('login error: ', loginError);\r\n\t}\r\n\r\n\r\n\tif(isAuthed) return <Navigate  to='/profile' replace/>\r\n\tif(isSubmitting || isValidating) return <Preloader />\r\n\r\n\treturn (\r\n\t\t<form action=\"#\" className={classes.LoginForm} onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t<EmailField className={classes.inputWrapper} error={errors.email} register={register}/>\r\n\t\t\t<PasswordField className={classes.inputWrapper} error={errors.password} register={register}/>\r\n\t\t\t<Checkbox<keyof LoginFormValuesType>\r\n\t\t\t\tregister={register}\r\n\t\t\t\terror={errors.rememberMe} name='rememberMe' labelText='Remember me'\r\n\t\t\t/>\r\n\t\t\t{captcha &&\r\n\t\t\t\t<Captcha \r\n\t\t\t\t\tregister={register} captchaUrl={captcha} \r\n\t\t\t\t\tclassName={classes.captcha} error={errors.captcha}\r\n\t\t\t\t/>\r\n\t\t\t}\r\n\t\t\t<button className={classes.submitBtn}>Sumbit</button>\r\n\t\t\t{summaryError && <p className={classes.errorMessage}>{summaryError}</p>}\r\n\t\t</form>\r\n\t)\r\n});\r\n\r\nexport default LoginForm;\r\n","import * as React from 'react';\r\nimport withNetworkRedirect from '../../hocs/withNetworkRedirect';\r\nimport classes from './Login.module.scss';\r\nimport LoginForm from './LoginForm';\r\n\r\ntype PropsType = {};\r\n\r\nconst Login: React.FC<PropsType> = (props) => {\r\n\treturn (\r\n\t\t<div className={classes.Login}>\r\n\t\t\t<h1 className={classes.title}>Login</h1>\r\n\t\t\t<LoginForm />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default withNetworkRedirect(Login);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"NetworkError_container__cduYR\",\"NetworkError\":\"NetworkError_NetworkError__7whnV\",\"errorText\":\"NetworkError_errorText__9A-Da\"};","import * as React from 'react';\r\nimport classes from './NetworkError.module.scss';\r\n\r\ntype PropsType = {};\r\n\r\nconst NetworkError: React.FC<PropsType> = (props) => {\r\n\treturn (\r\n\t\t<div className={classes.NetworkError}>\r\n\t\t\t<p className={classes.errorText}>Please check your internet connection and try again</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default NetworkError;\r\n","import { RootStateType } from '../Redux/redux-store';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport NetworkError from '../UI/NetworkError';\r\n\r\ntype MapStateToPropsType = {\r\n\tisNetworkError: boolean,\r\n}\r\n\r\nconst NetworkRedirectMstp = (state: RootStateType): MapStateToPropsType => {\r\n\treturn {isNetworkError: state.app.isNetworkError};\r\n}\r\n\r\nfunction withNetworkRedirect <T>(Component: React.ComponentType<T>)  {\r\n\treturn connect<MapStateToPropsType>(NetworkRedirectMstp)((props: MapStateToPropsType) => {\r\n\t\tconst {isNetworkError, ...restProps} = props;\r\n\t\tif (props.isNetworkError)\r\n\t\t\treturn <NetworkError />;\r\n\r\n\t\treturn <Component { ...restProps as T} /> ;\r\n\t});\r\n};\r\n\r\nexport default withNetworkRedirect;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Field_container__1XU3U\",\"Field\":\"Field_Field__-Tjhi\",\"errorMessage\":\"Field_errorMessage__vB2Ku\"};"],"names":["register","name","validation","className","error","labelText","classes","type","id","htmlFor","tabIndex","Number","children","message","rest","Field","placeholder","required","autoComplete","pattern","minLength","value","maxLength","LoginForm","React","props","isAuthed","useSelector","selectIsAuthed","loginError","selectLoginError","dispatch","useDispatch","loginToProfile","data","login","useForm","handleSubmit","formState","errors","isValidating","isSubmitting","summaryError","setSummaryError","console","log","onSubmit","to","replace","Preloader","action","email","password","Checkbox","rememberMe","withNetworkRedirect","NetworkRedirectMstp","state","isNetworkError","app","Component","connect","restProps"],"sourceRoot":""}