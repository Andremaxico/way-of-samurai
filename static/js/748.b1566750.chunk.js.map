{"version":3,"file":"static/js/748.b1566750.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/UI/FormControls/Checkbox/Checkbox.module.scss?25a9","UI/FormControls/Checkbox/Checkbox.tsx","UI/FormControls/Field/Field.tsx","webpack://samurai-way/./src/UI/FormControls/Textarea/Textarea.module.scss?d84d","UI/FormControls/Textarea/Textarea.tsx","webpack://samurai-way/./src/components/Profile/ProfileBody/ProfileBody.module.scss?0686","webpack://samurai-way/./src/UI/Contact/Contact.module.scss?71ed","UI/Contact/Contact.tsx","components/Profile/ProfileBody/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfileBody/ProfileInfoForm/ProfileInfoForm.tsx","components/Profile/ProfileBody/ProfileBody.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.scss?ca59","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.scss?4008","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/NewPost/NewPost.module.scss?b205","components/Profile/NewPost/NewPost.tsx","components/Profile/NewPost/NewPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://samurai-way/./src/UI/NetworkError/NetworkError.module.scss?0318","UI/NetworkError/NetworkError.tsx","hocs/withNetworkRedirect.tsx","webpack://samurai-way/./src/UI/FormControls/Field/Field.module.scss?80fb"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Checkbox_container__sVo6P\",\"Checkbox\":\"Checkbox_Checkbox__JIYPe\",\"error\":\"Checkbox_error__dLJ4c\"};","import * as React from 'react'\r\nimport { DeepRequired, FieldError, FieldErrorsImpl, FieldNamesMarkedBoolean, Merge } from 'react-hook-form';\r\nimport classes from './Checkbox.module.scss';\r\n\r\ntype PropsType<FieldsNames> = {\r\n\tregister: any,\r\n\tname: FieldsNames,\r\n\tvalidation?: object,\r\n\tclassName?:string | undefined,\r\n\terror: FieldError | undefined,\r\n\tlabelText: string | null\r\n}\r\n\r\nconst Checkbox = <FieldsNames extends string>({\r\n\tregister, name, validation, className, error, labelText\r\n}: PropsType<FieldsNames>) => {\r\n\treturn (\r\n\t\t<div className={`${classes.Checkbox} ${className}`}>\r\n\t\t\t<input \r\n\t\t\t\ttype=\"checkbox\" id={name} \r\n\t\t\t\t{...register(name, {...validation} )} \r\n\t\t\t\tclassName={classes.checkboxInput}\r\n\t\t\t/>\r\n\t\t\t<label \r\n\t\t\t\thtmlFor={name} tabIndex={Number('0')} \r\n\t\t\t\tclassName={`${classes.checkboxLabel} ${error && classes.error}`}\r\n\t\t\t>{labelText}</label>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Checkbox;\r\n","import * as React from 'react';\r\nimport { FormFieldErrorType } from '../../../types/types';\r\nimport classes from './Field.module.scss';\r\n\r\nexport type FieldPropsType = {\r\n\tregister?: any,\r\n\terror: FormFieldErrorType | undefined,\r\n\tclassName?: string | undefined,\r\n\trest?: object,\r\n} \r\n\r\ntype PropsType = {\r\n\tchildren: React.ReactNode,\r\n} & FieldPropsType;\r\n\r\nconst Field: React.FC<PropsType> = ({className, error, children }) => {\r\n\treturn (\r\n\t\t<div className={`${classes.Field} ${className}`}>\r\n\t\t\t{children}\r\n\t\t\t{error && <p className={classes.errorMessage}>{error.message}</p>}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Field;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Textarea_container__KVlq1\",\"Textarea\":\"Textarea_Textarea__Vwi60\",\"textarea\":\"Textarea_textarea__ro8Cq\",\"error\":\"Textarea_error__nqZBf\",\"errorMessage\":\"Textarea_errorMessage__6IvbI\"};","import * as React from 'react';\r\n// import { DeepRequired, FieldErrors, FieldErrorsImpl, Merge } from 'react-hook-form';\r\nimport { FormFieldErrorType } from '../../../types/types';\r\nimport classes from './Textarea.module.scss';\r\n\r\ntype PropsType<FormFieldNames> = {\r\n\tregister: any,\r\n\tname: FormFieldNames,\r\n\tvalidation?: object,\r\n\terror: FormFieldErrorType | undefined /*| Merge<FieldErrors, FieldErrorsImpl<DeepRequired<any>>> */,\r\n\tclassName?: string,\r\n\tplaceholder?: string,\r\n\trest?: object,\r\n}\r\n\r\nconst Textarea = <FieldsNamesType extends string>({\r\n\tregister, name, validation, error, className, placeholder, ...rest\r\n}: PropsType<FieldsNamesType>): JSX.Element => {\r\n\treturn (\r\n\t\t<div className={classes.Textarea}>\r\n\t\t\t<textarea {...register(name, {...validation, \r\n\t\t\t\tminLength: {value: 2, message: 'Your text is too short'}})} {...rest}\r\n\t\t\t\tclassName={`${classes.textarea} ${className} ${error && classes.error}`}\r\n\t\t\t\tplaceholder={placeholder || ''}\r\n\t\t\t></textarea>\r\n\t\t\t{error && <p className={classes.errorMessage}>{error.message}</p>}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Textarea;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ProfileBody_container__IDU7r\",\"profileBody\":\"ProfileBody_profileBody__YJWNv\",\"cover\":\"ProfileBody_cover__1KR2Z\",\"info\":\"ProfileBody_info__alpqF\",\"avatar\":\"ProfileBody_avatar__WQwrJ\",\"my\":\"ProfileBody_my__5cGg0\",\"ProfileInfo\":\"ProfileBody_ProfileInfo__GywZa\",\"login\":\"ProfileBody_login__cTPUm\",\"statusText\":\"ProfileBody_statusText__dsdVz\",\"defaultStatus\":\"ProfileBody_defaultStatus__vZOuL\",\"profileStatus\":\"ProfileBody_profileStatus__GNJJn\",\"statusInput\":\"ProfileBody_statusInput__VOoMQ\",\"editBtn\":\"ProfileBody_editBtn__OVUeV\",\"ProfileInfoForm\":\"ProfileBody_ProfileInfoForm__CEaZv\",\"errorMessage\":\"ProfileBody_errorMessage__Ya9NO\",\"input\":\"ProfileBody_input__jIRrx\",\"lookingForAJob\":\"ProfileBody_lookingForAJob__wpsbi\",\"lookingForAJobDescription\":\"ProfileBody_lookingForAJobDescription__fJIUi\",\"submitBtn\":\"ProfileBody_submitBtn__ITDKu\",\"contacts\":\"ProfileBody_contacts__5OOPg\",\"contactsTitle\":\"ProfileBody_contactsTitle__wJUsx\",\"logoutBtn\":\"ProfileBody_logoutBtn__6VR8k\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contact_container__1EZB2\",\"Contact\":\"Contact_Contact__5Gre7\"};","import * as React from 'react';\r\nimport classes from './Contact.module.scss';\r\n\r\ntype ContactPropsType = {\r\n\ttitle: string,\r\n\tvalue: string | null\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({title, value}) => {\r\n\treturn (\r\n\t\t<div className={classes.Contact}>\r\n\t\t\t<a href={value || ''} target='_blank'>{title}</a>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Contact;","import * as React from 'react';\r\nimport ProfileStatus from '../ProfileStatus';\r\nimport classes from '../ProfileBody.module.scss';\r\nimport { ProfileInfoType } from '../../../../types/types';\r\nimport Contact from '../../../../UI/Contact/Contact';\r\n\r\ntype PropsType = {\r\n\tprofileInfo: ProfileInfoType,\r\n\tupdateMyStatus: (status: string) => void,\r\n\tactivateEdit: () => void,\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profileInfo, updateMyStatus, activateEdit}) => {\r\n\tconst {\r\n\t\tfullName = '', aboutMe, isMyProfile, contacts, \r\n\t\tlookingForAJob, lookingForAJobDescription,\r\n\t} = profileInfo;\r\n\r\n\t//sets {key: value} to [[key, value]]\r\n\tconst contactsArr: Array<Array<string>> = Object.entries(contacts || {});\r\n\t//map [[key, value]] to React component\r\n\tconst contactsList = contactsArr.map(([title, value]) => {\r\n\t\treturn <Contact key={title} title={title} value={value}/>\r\n\t})\r\n\r\n\t//AndreMaxico => Andre Maxico\r\n\tconst name: string = fullName.split('').map(symbol => {\r\n\t\treturn symbol.toUpperCase() === symbol ? ` ${symbol}` : symbol\r\n\t}).join(' ');\r\n\treturn (\r\n\t\t<div className={classes.ProfileInfo}>\r\n\t\t\t<p className={classes.login}>{name}</p>\r\n\t\t\t<div className={classes.statusText}>\r\n\t\t\t\t<p>{aboutMe}</p>\r\n\t\t\t</div>\r\n\t\t\t<p className={classes.lookingForAJob}><b>Looking for a job:</b> {lookingForAJob ? 'Yes' : 'No'}</p>\r\n\t\t\t{lookingForAJob &&\r\n\t\t\t\t<p className={classes.lookingForAJobDescription}><b>Description:</b> {lookingForAJobDescription}</p>\r\n\t\t\t}\r\n\t\t\t<h2 className={classes.contactsTitle}>Contacts</h2>\r\n\t\t\t<div className={classes.contacts}>\r\n\t\t\t\t{contactsList}\r\n\t\t\t</div>\r\n\t\t\t{isMyProfile &&\r\n\t\t\t\t<button className={classes.editBtn} onClick={activateEdit}>Edit</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import * as React from 'react';\r\nimport { useForm, Controller, SubmitHandler } from 'react-hook-form';\r\nimport Field from '../../../../UI/FormControls/Field/Field';\r\nimport Checkbox from '../../../../UI/FormControls/Checkbox';\r\nimport Textarea from '../../../../UI/FormControls/Textarea';\r\nimport classes from '../ProfileBody.module.scss';\r\nimport { ContactsType, ProfileInfoType, ReactHookFormType } from '../../../../types/types';\r\n\r\ntype PropsType = {\r\n\tformError: string | null,\r\n\tprofileInfo: ProfileInfoType,\r\n\tupdateMyStatus: (status: string) => void,\r\n\tupdateMyProfileData: (profileData: ProfileInfoType) => void,\r\n\tdeactivateEdit: () => void,\r\n}\r\n\r\nconst ProfileInfoForm: React.FC<PropsType> = ({\r\n\tdeactivateEdit, profileInfo, updateMyProfileData, formError\r\n}) => {\r\n\tconst { \r\n\t\tregister, handleSubmit, watch, \r\n\t\tsetFocus, formState: { errors }\r\n\t} = useForm<ProfileInfoType>({\r\n\t\tdefaultValues: {\r\n\t\t\t...profileInfo\r\n\t\t}\r\n\t});\r\n\tconst [summaryError, setSummaryError] = React.useState<string | null>(null)\r\n\t\r\n\tReact.useEffect(() => {\r\n\t\tsetFocus(\"fullName\", {shouldSelect: true});\r\n\t}, [setFocus]);\r\n\r\n\t//sets {key: value} -> [[key, value]]\r\n\tconst contactsArr: Array<Array<string>> = Object.entries(profileInfo.contacts);\r\n\t//map [[key, value]] -> React component\r\n\tconst contactsInputsList = contactsArr.map(([title, value]: Array<string>) => {\r\n\t\tconst name: any =`contacts.${title}`;\r\n\t\treturn (\r\n\t\t\t<div className={classes.contact} key={title}>\r\n\t\t\t\t<b>{title}:</b>\r\n\t\t\t\t<Field className={classes.contact} error={errors.contacts && errors.contacts[title as keyof ContactsType]}>\r\n\t\t\t\t\t<input key={title}\r\n\t\t\t\t\t\ttype=\"url\" placeholder={`Input your ${title}'s link`} {...register(name, {\r\n\t\t\t\t\t\t\tpattern: {\r\n\t\t\t\t\t\t\t\tvalue: /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/,\r\n\t\t\t\t\t\t\t\tmessage: 'Input valid link, https://www.websiteName.com/...',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Field>\r\n\t\t\t</div>\r\n\t\t)\r\n\t})\r\n\r\n\tReact.useEffect(() => {\r\n\t\tsetSummaryError(formError);\r\n\t}, [formError])\r\n\r\n\tconst onSubmit: SubmitHandler<ProfileInfoType> = (data) => {\r\n\t\tif(!summaryError) {\r\n\t\t\tupdateMyProfileData(data);\r\n\t\t\tdeactivateEdit();\r\n\t\t}\r\n\t}\r\n\r\n\tconst onFormChange = () => setSummaryError(null);\r\n\r\n\treturn (\r\n\t\t<form className={classes.ProfileInfoForm} onChange={onFormChange} onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t{summaryError &&\r\n\t\t\t\t<p className={classes.errorMessage}>{summaryError}</p>\r\n\t\t\t}\r\n\t\t\t<Field className={classes.input} error={errors.fullName}>\r\n\t\t\t\t<input type=\"text\" placeholder='Input your login' {...register('fullName', {\r\n\t\t\t\t\tpattern: /[a-zA-Z]+/,\r\n\t\t\t\t\tminLength: {value: 2, message: 'Your name must include over 1 symbol'},\r\n\t\t\t\t\tmaxLength: {value: 60, message: 'Your login must be shorter than 61 symbol'},\r\n\t\t\t\t})}/>\r\n\t\t\t</Field>\r\n\t\t\t<Textarea<keyof ProfileInfoType>\r\n\t\t\t\tplaceholder='About me' name='aboutMe'\r\n\t\t\t\terror={errors.aboutMe} validation={{ maxLength: { value: 300, message: 'Max status length: 300' } }}\r\n\t\t\t\tregister={register} />\r\n\t\t\t<div className={classes.lookingForAJob}><b>Looking for a job:</b> \r\n\t\t\t\t<Checkbox \r\n\t\t\t\t\tname='lookingForAJob' register={register} validation={{ required: false }} \r\n\t\t\t\t\tlabelText='' error={errors.lookingForAJob}/>\r\n\t\t\t</div>\r\n\t\t\t{watch('lookingForAJob') &&\r\n\t\t\t\t<div className={classes.lookingForAJobDescription}><b>Description:</b> \r\n\t\t\t\t\t<Textarea \r\n\t\t\t\t\t\tregister={register} name='lookingForAJobDescription'\r\n\t\t\t\t\t\terror={errors.lookingForAJobDescription} placeholder='For job description' validation={undefined} rest={undefined}\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t<div className={classes.contacts}>\r\n\t\t\t\t<h2 className={classes.contactsTitle}>Contacts</h2>\r\n\t\t\t\t{ contactsInputsList }\r\n\t\t\t</div>\r\n\t\t\t<button type='submit' className={classes.submitBtn}>Save</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default ProfileInfoForm;","import * as React from 'react';\r\nimport classes from './ProfileBody.module.scss';\r\nimport defaultAvatar from '../../../assests/images/default-user-avatar.png';\r\nimport defaultCover from '../../../assests/images/default-cover.png';\r\nimport Preloader from '../../../UI/Preloader';\r\nimport ProfileInfo from './ProfileInfo';\r\nimport ProfileInfoForm from './ProfileInfoForm';\r\nimport { ProfilePropsType } from '../Profile';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FollowBtn from '../../../UI/FollowBtn';\r\nimport { NavigateFunction, useNavigate } from 'react-router-dom';\r\nimport { isFollowedType as IsFollowedType, ProfileInfoType } from '../../../types/types';\r\nimport { selectCurrentUserProfileInfo, selectFormError } from '../../../Redux/profile-selectors';\r\nimport { profileActions, setAvatar } from '../../../Redux/profile-reducer';\r\nimport { AnyArray } from 'immer/dist/internal';\r\nimport { AnyAction } from 'redux';\r\nimport { logout } from '../../../Redux/auth-reducer';\r\n\r\nconst ProfileBody: React.FC<ProfilePropsType> = ({followed, currUserProfileInfo: profileInfo}) => {\r\n\t//get data from state\r\n\tconst formError = useSelector(selectFormError);\r\n\t\r\n\t//state callbacks\r\n\tconst dispatch = useDispatch();\r\n\tconst updateMyStatus = (value: string) => {\r\n\t\tdispatch(profileActions.setMyStatus(value));\r\n\t}\r\n\tconst logoutFromProfile = () => {\r\n\t\tdispatch(logout() as unknown as AnyAction);\r\n\t}\r\n\tconst setMyAvatar = (file: any) => {\r\n\t\tdispatch(setAvatar(file) as unknown as AnyAction);\r\n\t}\r\n\tconst updateMyProfileData = (profileData: ProfileInfoType) => {\r\n\t\tdispatch(profileActions.setMyProfileInfo(profileData));\r\n\t}\r\n\r\n\r\n\tconst navigate = useNavigate();\r\n\tconst [isAvatarUpdating, setIsAvatarUpdating] = React.useState<boolean>(false);\r\n\tconst [isEdit, setIsEdit] = React.useState<boolean>(false);\r\n\tconst [isFollowed, setIsFollowed] = React.useState<IsFollowedType>(followed);\r\n\t\r\n\tconst {userId: id, photos, isMyProfile } = profileInfo;\r\n\tconst {small: coverImg, large: avatarImg} = photos || {};\r\n\r\n\t//isFollowed: true(false) -> isFollowed: false(true)\r\n\tconst changeFollowingStatus = (value: boolean) => {\r\n\t\tsetIsFollowed(value);\r\n\t\tnavigate(`/profile/${id}/${value}`, {replace: true});\r\n\t}\r\n\t//change avatar\r\n\tconst avatarFileChange = async (e: React.SyntheticEvent) => {\r\n\t\tconst target = e.target as HTMLInputElement;\r\n\t\tif (!target.files) return;\r\n\t\tif(target.files.length > 0) {\r\n\t\t\tsetIsAvatarUpdating(true);\r\n\t\t\tawait setMyAvatar(target.files[0]);\r\n\t\t\tsetIsAvatarUpdating(false);\r\n\t\t}\r\n\t}\r\n\r\n\t//isEdit\r\n\tconst activateEdit = () => setIsEdit(true);\r\n\tconst deactivateEdit = () => setIsEdit(false);\r\n\r\n\tif(isAvatarUpdating) return <Preloader />\r\n\r\n\treturn (\r\n\t\t<div className={classes.profileBody}>\r\n\t\t\t<div className={classes.cover}>\r\n\t\t\t\t<img src={coverImg || defaultCover} alt=\"Cover img\" />\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.info}>\r\n\t\t\t\t<div className={`${classes.avatar} ${isMyProfile && classes.my}`}>\r\n\t\t\t\t\t<img src={avatarImg || defaultAvatar} alt=\"Loading avatar...\" />\r\n\t\t\t\t\t{ isMyProfile && \r\n\t\t\t\t\t\t<div className={classes.addFile}>\r\n\t\t\t\t\t\t\t<input type='file' id='getFile' onChange={ avatarFileChange }/> \r\n\t\t\t\t\t\t\t<label htmlFor=\"getFile\">Set avatar</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t{isEdit ?\r\n\t\t\t\t\t<ProfileInfoForm \r\n\t\t\t\t\t\tdeactivateEdit={deactivateEdit} formError={formError}\r\n\t\t\t\t\t\tprofileInfo={profileInfo}\r\n\t\t\t\t\t\tupdateMyStatus={updateMyStatus} updateMyProfileData={updateMyProfileData}\r\n\t\t\t\t\t/>\r\n\t\t\t\t:\t<ProfileInfo activateEdit={activateEdit} profileInfo={profileInfo} updateMyStatus={updateMyStatus}/>\r\n\t\t\t\t}\r\n\t\t\t\t{ isMyProfile && <button className={classes.logoutBtn} onClick={ logoutFromProfile }>Logout</button>}\r\n\t\t\t\t{ !isMyProfile && <FollowBtn isFollowed={isFollowed} userId={id}  setIsFollowed={changeFollowingStatus}/> }\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileBody;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Post_container__FORhV\",\"post\":\"Post_post__43cTw\",\"avatar\":\"Post_avatar__dGEbx\",\"text\":\"Post_text__swDVs\"};","import * as React from 'react'\r\nimport { PostDataType } from '../../../../types/types';\r\nimport classes from './Post.module.scss';\r\n\r\ntype PropsType = {\r\n\tdata: PostDataType,\r\n\tavatarUrl: string,\r\n}\r\n\r\nconst Post: React.FC<PropsType> = ({data, avatarUrl}) => {\r\n  return (\r\n\t <div className={classes.post}>\r\n\t\t<div className={classes.avatar}>\r\n\t\t\t<img src={avatarUrl}/>\r\n\t\t</div>\r\n\t\t<div className={classes.text}>\r\n\t\t\t<p>{data.text}</p>\r\n\t\t\t<p>Likes count: {data.likesCount}</p>\r\n\t\t</div>\t\r\n\t </div>\r\n  )\r\n}\r\n\r\nexport default Post;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Profile_container__Wm7l7\",\"profile\":\"Profile_profile__iROPK\",\"myPosts\":\"Profile_myPosts__3JCrI\",\"title\":\"Profile_title__g+iCI\"};","import * as React from 'react';\r\nimport Post from './Post';\r\nimport classes from '../Profile.module.scss';\r\nimport defaultAvatar from '../../../assests/images/default-user-avatar.png';\r\nimport { PostDataType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n\tpostsData: Array<PostDataType>,\r\n\tavatarUrl: string,\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = ({postsData, avatarUrl}) => {\r\n\tlet postsList;\r\n\tif(postsData.length > 0) {\r\n\t\tpostsList = postsData.map((data: PostDataType) => {\r\n\t\t\tconsole.log(data);\r\n\t\t\treturn <Post avatarUrl={avatarUrl || defaultAvatar} data={data} key={data.id}/>;\r\n\t\t});\r\n\t} else {\r\n\t\tpostsList = '';\r\n\t}\r\n\treturn (\r\n\t\t<div className={classes.myPosts}>\r\n\t\t\t{ postsList }\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default MyPosts;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MyPosts from './MyPosts';\r\nimport { PostDataType } from '../../../types/types';\r\nimport { RootStateType } from '../../../Redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n\tpostsData: Array<PostDataType>,\r\n\tavatarUrl: string,\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n\treturn {\r\n\t\tpostsData: state.profilePage.postsData,\r\n\t\tavatarUrl: state.profilePage.currUserProfileInfo?.photos?.small\r\n\t}\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateToPropsType>(mapStateToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"NewPost_container__IKpkL\",\"title\":\"NewPost_title__5NM8Q\",\"NewPost\":\"NewPost_NewPost__l342s\"};","import * as React from 'react';\r\nimport classes from './NewPost.module.scss';\r\nimport { useForm } from 'react-hook-form';\r\nimport Textarea from '../../../UI/FormControls/Textarea';\r\n\r\ntype PropsType = {\r\n\taddPost: (value: string) => void,\r\n}\r\n\r\ntype NewPostFieldValuesType = {\r\n\tpostText: string\r\n}\r\n\r\nconst NewPost: React.FC<PropsType> = ({addPost}) => {\r\n\tconst { handleSubmit, resetField, watch, register, formState: { errors } } = useForm<NewPostFieldValuesType>();\r\n\r\n\tconst onSubmit = () => {\r\n\t\taddPost(watch('postText'));\r\n\t\tresetField('postText')\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form className={classes.NewPost} onSubmit={ handleSubmit( onSubmit ) }>\r\n\t\t\t<Textarea<keyof NewPostFieldValuesType>\r\n\t\t\t\tvalidation={{maxLength: {value: 500, message: 'Your post too long'},\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\tname='postText' placeholder='text...' register={register} error={errors.postText}\r\n\t\t\t/>\r\n\t\t\t<button>Add Post</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default NewPost;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { profileActions } from '../../../Redux/profile-reducer';\r\nimport NewPost from './NewPost';\r\n\r\ntype MapDispatchToPropsType = {\r\n\taddPost: (newPostValue: string) => void,\r\n}\r\n\r\nconst NewPostContainer = connect<null, MapDispatchToPropsType>(null, {addPost: profileActions.addPost})(NewPost);\r\n\r\nexport default NewPostContainer;\r\n","import * as React from 'react'\r\nimport ProfileBody from './ProfileBody';\r\nimport MyPosts from './MyPosts';\r\nimport NewPost from './NewPost'\r\nimport classes from './Profile.module.scss'\r\nimport Preloader from '../../UI/Preloader';\r\nimport { isFollowedType, ProfileInfoType, UserCardType } from '../../types/types';\r\n\r\nexport type ProfilePropsType = {\r\n\tfollowed: isFollowedType,\r\n\tcurrUserProfileInfo: ProfileInfoType,\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n\treturn (\r\n\t\t<div className={classes.profile}>\r\n\t\t\t<ProfileBody {...props}/>\r\n\t\t\t<h2 className={classes.title}>My posts</h2>\r\n\t\t\t<NewPost />\r\n\t\t\t<MyPosts />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Profile;\r\n","import * as React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport Profile from './Profile';\r\nimport Preloader from '../../UI/Preloader';\r\n//reducers\r\nimport { usersActions } from '../../Redux/users-reducer';\r\nimport { setUserById, updateMyStatus, setAvatar, updateMyProfileData } from '../../Redux/profile-reducer';\r\nimport { logout } from '../../Redux/auth-reducer';\r\n//selectors\r\nimport { selectIsAuthed } from '../../Redux/auth-selectors';\r\n//hocs\r\nimport withRouter from '../../hocs/withRouter';\r\nimport { AnyAction, compose } from 'redux';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport withNetworkRedirect from '../../hocs/withNetworkRedirect';\r\nimport { RootStateType } from '../../Redux/redux-store';\r\nimport { FriendCardType, ProfileInfoType, RouterPropsType, UserCardType } from '../../types/types';\r\nimport { selectIsFetching } from '../../Redux/users-selectors';\r\nimport { selectCurrentUserProfileInfo, selectMyProfileInfo } from '../../Redux/profile-selectors';\r\n\r\n\r\n\r\n\r\ntype PropsType = RouterPropsType;\r\n\r\nconst ProfileContainer: React.FC<PropsType> = (props) => {\r\n\tconst [userId, setUserId] = React.useState<number | null>(null);\r\n\r\n\tconst isAuthed = useSelector(selectIsAuthed);\r\n\tconst isFetching = useSelector(selectIsFetching);\r\n\tconst currUserProfileInfo = useSelector(selectCurrentUserProfileInfo);\r\n\tconst myProfileInfo = useSelector(selectMyProfileInfo);\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst setProfileByUserId = (userId: number) => {\r\n\t\tdispatch(setUserById(userId) as unknown as AnyAction);\r\n\t} \r\n\tconst toggleIsFetching = (value: boolean) => {\r\n\t\tdispatch(usersActions.toggleIsFetchingAC(value));\r\n\t}\r\n\r\n\t//if we render other user profile, we set const userId\r\n\tReact.useEffect(() => {\r\n\t\tif(props.router.params.userId) {\r\n\t\t\t//set local state for show user profile\r\n\t\t\tsetUserId(props.router.params.userId);\r\n\t\t} else {\r\n\t\t\t//set local state to null to show my profile\r\n\t\t\tsetUserId(null);\r\n\t\t}\r\n\r\n\t}, [props.router.params.userId]);\r\n\r\n\t//set currUserProfileInfo in state if we got userId\r\n\tReact.useEffect(() => {\r\n\t\tconst setUser = async (userId: number) => {\r\n\t\t\tawait setProfileByUserId(userId)\r\n\t\t\ttoggleIsFetching(false);\r\n\t\t}\r\n\t\t//if we get other user id, we set this with thunk\r\n\t\tif(userId) {\r\n\t\t\tsetUser(userId);\r\n\t\t}\r\n\t}, [userId]);\r\n\r\n\tif (!isAuthed && !props.router.params.userId) return <Navigate to='/login' replace />\r\n\r\n\tif(isFetching) {\r\n\t\treturn <Preloader />\r\n\t}\r\n\treturn (\r\n\t\t<Profile currUserProfileInfo={ userId\r\n\t\t\t\t? currUserProfileInfo\r\n\t\t\t\t: myProfileInfo\r\n\t\t\t\t} followed={props.router.params.isFollowed}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\n\r\n\r\n\r\nexport default compose(\r\n\twithNetworkRedirect,\r\n\twithRouter,\r\n)(ProfileContainer);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"NetworkError_container__cduYR\",\"NetworkError\":\"NetworkError_NetworkError__7whnV\",\"errorText\":\"NetworkError_errorText__9A-Da\"};","import * as React from 'react';\r\nimport classes from './NetworkError.module.scss';\r\n\r\ntype PropsType = {};\r\n\r\nconst NetworkError: React.FC<PropsType> = (props) => {\r\n\treturn (\r\n\t\t<div className={classes.NetworkError}>\r\n\t\t\t<p className={classes.errorText}>Please check your internet connection and try again</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default NetworkError;\r\n","import { RootStateType } from '../Redux/redux-store';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport NetworkError from '../UI/NetworkError';\r\n\r\ntype MapStateToPropsType = {\r\n\tisNetworkError: boolean,\r\n}\r\n\r\nconst NetworkRedirectMstp = (state: RootStateType): MapStateToPropsType => {\r\n\treturn {isNetworkError: state.app.isNetworkError};\r\n}\r\n\r\nfunction withNetworkRedirect <T>(Component: React.ComponentType<T>)  {\r\n\treturn connect<MapStateToPropsType>(NetworkRedirectMstp)((props: MapStateToPropsType) => {\r\n\t\tconst {isNetworkError, ...restProps} = props;\r\n\t\tif (props.isNetworkError)\r\n\t\t\treturn <NetworkError />;\r\n\r\n\t\treturn <Component { ...restProps as T} /> ;\r\n\t});\r\n};\r\n\r\nexport default withNetworkRedirect;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Field_container__1XU3U\",\"Field\":\"Field_Field__-Tjhi\",\"errorMessage\":\"Field_errorMessage__vB2Ku\"};"],"names":["register","name","validation","className","error","labelText","classes","type","id","htmlFor","tabIndex","Number","children","message","placeholder","rest","minLength","value","title","href","target","profileInfo","activateEdit","updateMyStatus","fullName","aboutMe","isMyProfile","contacts","lookingForAJob","lookingForAJobDescription","contactsList","Object","entries","map","split","symbol","toUpperCase","join","onClick","deactivateEdit","updateMyProfileData","formError","useForm","defaultValues","handleSubmit","watch","setFocus","errors","formState","React","summaryError","setSummaryError","shouldSelect","contactsInputsList","Field","pattern","onChange","onSubmit","data","maxLength","Textarea","Checkbox","required","undefined","followed","currUserProfileInfo","useSelector","selectFormError","dispatch","useDispatch","profileActions","navigate","useNavigate","isAvatarUpdating","setIsAvatarUpdating","isEdit","setIsEdit","isFollowed","setIsFollowed","userId","photos","coverImg","small","avatarImg","large","avatarFileChange","e","files","length","file","setAvatar","Preloader","src","defaultCover","alt","defaultAvatar","profileData","logout","FollowBtn","replace","avatarUrl","text","likesCount","postsList","postsData","console","log","connect","state","profilePage","MyPosts","addPost","resetField","postText","NewPost","props","compose","withNetworkRedirect","withRouter","setUserId","isAuthed","selectIsAuthed","isFetching","selectIsFetching","selectCurrentUserProfileInfo","myProfileInfo","selectMyProfileInfo","setProfileByUserId","setUserById","router","params","setUser","usersActions","to","NetworkRedirectMstp","isNetworkError","app","Component","restProps"],"sourceRoot":""}